// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OG.GraphQL.Infrastructure.Contexts;

#nullable disable

namespace OG.GraphQL.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.HasKey("CourseId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("CourseInstructor", (string)null);
                });

            modelBuilder.Entity("CoursePerson", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "PersonId");

                    b.ToTable("CoursePerson");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("Administrator")
                        .HasColumnType("int");

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("InstructorId");

                    b.ToTable("OfficeAssignment");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OnlineCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("URL");

                    b.HasKey("CourseId");

                    b.ToTable("OnlineCourse");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OnsiteCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("smalldatetime");

                    b.HasKey("CourseId");

                    b.ToTable("OnsiteCourse");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.StudentGrade", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGrade");
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseInstructor_Course");

                    b.HasOne("OG.GraphQL.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseInstructor_Person");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Course", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OfficeAssignment", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Person", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("OG.GraphQL.Domain.Entities.OfficeAssignment", "InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_OfficeAssignment_Person");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OnlineCourse", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Course", "Course")
                        .WithOne("OnlineCourse")
                        .HasForeignKey("OG.GraphQL.Domain.Entities.OnlineCourse", "CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_OnlineCourse_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.OnsiteCourse", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Course", "Course")
                        .WithOne("OnsiteCourse")
                        .HasForeignKey("OG.GraphQL.Domain.Entities.OnsiteCourse", "CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_OnsiteCourse_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.StudentGrade", b =>
                {
                    b.HasOne("OG.GraphQL.Domain.Entities.Course", "Course")
                        .WithMany("StudentGrades")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentGrade_Course");

                    b.HasOne("OG.GraphQL.Domain.Entities.Person", "Student")
                        .WithMany("StudentGrades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentGrade_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Course", b =>
                {
                    b.Navigation("OnlineCourse");

                    b.Navigation("OnsiteCourse");

                    b.Navigation("StudentGrades");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("OG.GraphQL.Domain.Entities.Person", b =>
                {
                    b.Navigation("OfficeAssignment");

                    b.Navigation("StudentGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
